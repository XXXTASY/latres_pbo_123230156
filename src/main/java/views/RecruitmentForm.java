/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package views;

import java.sql.SQLException;
import java.util.List;
import java.util.Vector;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import controllers.RecruitmentController;
import models.AndroidDeveloper;
import models.Candidate;
import models.WebDeveloper;
/**
 *
 * @author XXXTASY was helped by GEMINI (for better formatting and new ways, XXXTASY just discovered itðŸ’€)
 */
public class RecruitmentForm extends javax.swing.JFrame {

    private RecruitmentController controller;
    private DefaultTableModel tableModel;
    private int selectedCandidateId = -1;

    public RecruitmentForm() {
        initComponents();
        setLocationRelativeTo(null);
        controller = new RecruitmentController();
        initTable();
        loadCandidates();
    }

    private void initTable() {
        tableModel = new DefaultTableModel(new Object[]{"ID", "Name", "Path", "Writing", "Coding", "Interview", "Score", "Status"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Semua sel tidak bisa diedit langsung di tabel
            }
        };
        tblCandidates.setModel(tableModel);
        tblCandidates.getColumnModel().getColumn(0).setMinWidth(0);
        tblCandidates.getColumnModel().getColumn(0).setMaxWidth(0);
        tblCandidates.getColumnModel().getColumn(0).setWidth(0);
    }

    private void loadCandidates() {
        tableModel.setRowCount(0);
        try {
            List<Candidate> candidates = controller.getAllCandidates();
            for (Candidate c : candidates) {
                Vector<Object> row = new Vector<>();
                row.add(c.getId());
                row.add(c.getName());
                row.add(c.getPath());
                row.add(c.getWritingScore());
                row.add(c.getCodingScore());
                row.add(c.getInterviewScore());
                row.add(String.format("%.2f", c.getFinalScore()));
                row.add(c.getStatus());
                tableModel.addRow(row);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error loading candidates: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void clearFields() {
        txtName.setText("");
        cmbPath.setSelectedIndex(0);
        txtWriting.setText("");
        txtCoding.setText("");
        txtInterview.setText("");
        selectedCandidateId = -1;
        btnAdd.setEnabled(true); // Aktifkan tombol Add
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCandidates = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cmbPath = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        txtWriting = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtCoding = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtInterview = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PT. OOP Recruitment System");

        tblCandidates.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Path", "Writing", "Coding", "Interview", "Score", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCandidates.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCandidatesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCandidates);

        jLabel1.setText("Name");

        jLabel2.setText("Path");

        cmbPath.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Android Dev", "Web Dev" }));

        jLabel3.setText("Writing");

        jLabel4.setText("Coding");

        jLabel5.setText("Interview");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(txtName)
                    .addComponent(jLabel2)
                    .addComponent(cmbPath, 0, 200, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addComponent(txtWriting)
                    .addComponent(jLabel4)
                    .addComponent(txtCoding)
                    .addComponent(jLabel5)
                    .addComponent(txtInterview)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtWriting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCoding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtInterview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClear))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String name = txtName.getText().trim();
            String path = cmbPath.getSelectedItem().toString();
            double writing = Double.parseDouble(txtWriting.getText());
            double coding = Double.parseDouble(txtCoding.getText());
            double interview = Double.parseDouble(txtInterview.getText());

            if (name.isEmpty() || txtWriting.getText().isEmpty() || txtCoding.getText().isEmpty() || txtInterview.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "All fields must be filled.", "Input Error", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            if (writing < 0 || writing > 100 || coding < 0 || coding > 100 || interview < 0 || interview > 100) {
                 JOptionPane.showMessageDialog(this, "Scores must be between 0 and 100.", "Input Error", JOptionPane.WARNING_MESSAGE);
                 return;
            }

            Candidate candidate;
            if ("Android Dev".equals(path)) {
                candidate = new AndroidDeveloper(name, writing, coding, interview);
            } else {
                candidate = new WebDeveloper(name, writing, coding, interview);
            }

            boolean success = controller.addCandidate(candidate);
            if (success) {
                JOptionPane.showMessageDialog(this, "Candidate added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                loadCandidates();
                clearFields();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to add candidate.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter valid numbers for scores.", "Input Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException e) {
            if (e.getMessage().contains("Duplicate entry") && e.getMessage().contains("for key 'name'")) {
                 JOptionPane.showMessageDialog(this, "Candidate with this name already exists. Please use a unique name.", "Input Error", JOptionPane.ERROR_MESSAGE);
            } else {
                 JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {
        if (selectedCandidateId == -1) {
            JOptionPane.showMessageDialog(this, "Please select a candidate to update.", "Selection Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            String name = txtName.getText().trim();
            String path = cmbPath.getSelectedItem().toString();
            double writing = Double.parseDouble(txtWriting.getText());
            double coding = Double.parseDouble(txtCoding.getText());
            double interview = Double.parseDouble(txtInterview.getText());

            if (name.isEmpty() || txtWriting.getText().isEmpty() || txtCoding.getText().isEmpty() || txtInterview.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "All fields must be filled.", "Input Error", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            if (writing < 0 || writing > 100 || coding < 0 || coding > 100 || interview < 0 || interview > 100) {
                 JOptionPane.showMessageDialog(this, "Scores must be between 0 and 100.", "Input Error", JOptionPane.WARNING_MESSAGE);
                 return;
            }

            Candidate candidate;
            if ("Android Dev".equals(path)) {
                candidate = new AndroidDeveloper(selectedCandidateId, name, writing, coding, interview);
            } else {
                candidate = new WebDeveloper(selectedCandidateId, name, writing, coding, interview);
            }

            boolean success = controller.updateCandidate(candidate);
            if (success) {
                JOptionPane.showMessageDialog(this, "Candidate updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                loadCandidates();
                clearFields();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to update candidate. Candidate not found or no changes.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter valid numbers for scores.", "Input Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException e) {
            if (e.getMessage().contains("Duplicate entry") && e.getMessage().contains("for key 'name'")) {
                 JOptionPane.showMessageDialog(this, "Candidate with this name already exists. Please use a unique name.", "Input Error", JOptionPane.ERROR_MESSAGE);
            } else {
                 JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {
        if (selectedCandidateId == -1) {
            JOptionPane.showMessageDialog(this, "Please select a candidate to delete.", "Selection Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String nameToDelete = txtName.getText();
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete " + nameToDelete + "?", "Confirm Delete", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            try {
                boolean success = controller.deleteCandidate(selectedCandidateId);
                if (success) {
                    JOptionPane.showMessageDialog(this, "Candidate deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    loadCandidates();
                    clearFields();
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to delete candidate.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {
        clearFields();
    }

    private void tblCandidatesMouseClicked(java.awt.event.MouseEvent evt) {
        int selectedRow = tblCandidates.getSelectedRow();
        if (selectedRow != -1) {
            selectedCandidateId = (int) tableModel.getValueAt(selectedRow, 0);
            txtName.setText(tableModel.getValueAt(selectedRow, 1).toString());
            cmbPath.setSelectedItem(tableModel.getValueAt(selectedRow, 2).toString());
            txtWriting.setText(tableModel.getValueAt(selectedRow, 3).toString());
            txtCoding.setText(tableModel.getValueAt(selectedRow, 4).toString());
            txtInterview.setText(tableModel.getValueAt(selectedRow, 5).toString());
            
            // Saat baris dipilih, aktifkan tombol Update/Delete dan nonaktifkan tombol Add sementara
            btnAdd.setEnabled(false); 
            btnUpdate.setEnabled(true); 
            btnDelete.setEnabled(true);
        }
    }

    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbPath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCandidates;
    private javax.swing.JTextField txtCoding;
    private javax.swing.JTextField txtInterview;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtWriting;
}
